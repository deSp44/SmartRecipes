@model SmartRecipesMVC.Application.ViewModels.RecipeVm.ListRecipeForListVm

@{
    ViewData["Title"] = "Public recipes";
}

<h1>PUBLIC</h1>

<div class="btn-toolbar mb-3" role="toolbar">
    <form asp-action="Public" asp-controller="Recipes" method="get">
        <div class="btn-group mr-2 mb-2" role="group">
            <input type="submit" class="btn btn-success" value="Create new recipe" asp-action="AddRecipe" method="get" />
        </div>
    </form>
    <form asp-action="Public" asp-controller="Recipes" method="post">
        <div class="input-group">
            <input class="form-control me-auto" type="text" asp-for="SearchString" name="searchString" id="searchString" placeholder="Search...">
            <div class="input-group-prepend">
                <input type="submit" class="btn btn-secondary" value="Search" />
                <a class="btn btn-outline-danger" asp-controller="Recipes" asp-action="Public">Reset</a>
            </div>
        </div>
        <input type="hidden" name="pageNumber" id="pageNumber" />
        <input type="hidden" name="pageSize" id="pageSize" value="12" />
    </form>
</div>

<hr />

<div class="card-deck">
    @foreach (var item in Model.Recipes)
    {
        <div class="col-xs-12 col-sm-6 col-lg-6 col-xl-4 mb-5">
            <div class="card">
                <a class="page-link" asp-area="" asp-controller="Recipes" asp-action="ViewRecipe" asp-route-recipeId="@item.Id">
                    @if (item.Images.Count == 0)
                    {
                        <img class="my-image-crop card-img-top card-height" src="~/Content/PageContent/image-not-found.png" alt="Image not found" />
                    }
                    else
                    {
                        foreach (var image in item.Images)
                        {
                            if (image.IsMainImage)
                            {
                                <img class="my-image-crop card-img-top card-height" src="@Url.Content(image.ImagePath)" alt="Image corrupted" />
                            }
                        }
                    }
                    <div class="card-body">
                        <h5 class="card-title text-truncate">@Html.DisplayFor(modelItem => item.Name)</h5>
                        <p class="card-text text-truncate">@Html.DisplayFor(modelItem => item.Description)</p>
                    </div>
                    <div class="card-footer">
                        <small class="text-muted">Created @Html.DisplayFor(modelItem => item.CreateDate)</small>
                    </div>
                </a>
            </div>
        </div>
    }
</div>

<div>
    <nav aria-label="Navigation">
        <ul class="pagination pagination-lg justify-content-center">
            @for (int i = 1; i <= Math.Ceiling(Model.Count / (double)Model.PageSize); i++)
            {
                @if (i != Model.CurrentPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="javascript:PagerClick(@i)">@i</a>
                    </li>
                }
                else
                {
                    <li class="page-item active">
                        <a class="page-link" href="#">
                            @i<span class="sr-only">(current)</span>
                        </a>
                    </li>
                }
            }
        </ul>
    </nav>
</div>

@section Scripts
{
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">
        function PagerClick(index) {
            document.getElementById("pageNumber").value = index;
            document.getElementById("pageNumber").form.submit();
        }
    </script>
}